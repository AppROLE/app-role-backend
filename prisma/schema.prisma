generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  username     String
  email        String     @unique
  createdAt    DateTime   @default(now())
  lnkInstagram String?
  lnkTiktok    String?
  bgPhoto      String?
  profilePhoto String?
  privacy      Boolean    @default(false)
  followings   Follow[]   @relation("UserFollowing")
  followers    Follow[]   @relation("UserFollower")
  presences    Presence[]
  reviews      Review[]
  favorites    Favorite[]
}

model Follow {
  id             String @id @default(uuid())
  userId         String
  userFollowedId String
  userFollowing  User   @relation("UserFollowing", fields: [userId], references: [id])
  userFollower   User   @relation("UserFollower", fields: [userFollowedId], references: [id])

  @@unique([userId, userFollowedId])
}

model Institute {
  id            String         @id @default(uuid())
  name          String
  logoPhoto     String?
  description   String?
  instituteType String?
  address       String
  price         Float?
  districtId    String
  events        Event[]
  reviews       Review[]
  photos        Photo[]
  Favorite      Favorite[]
  EventFeature  EventFeature[]
}

model Event {
  id          String         @id @default(uuid())
  name        String
  bannerUrl   String?
  logoUrl     String?
  address     String
  price       Float?
  description String?
  ageRange    String?
  eventDate   DateTime
  districtId  String
  instituteId String
  institute   Institute      @relation(fields: [instituteId], references: [id])
  presences   Presence[]
  favorites   Favorite[]
  features    EventFeature[]
}

model Favorite {
  id          String    @id @default(uuid())
  instituteId String
  eventId     String
  userId      String
  event       Event     @relation(fields: [eventId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  institute   Institute @relation(fields: [instituteId], references: [id])
}

model Presence {
  id           String  @id @default(uuid())
  userId       String
  eventId      String
  promoterCode String?
  user         User    @relation(fields: [userId], references: [id])
  event        Event   @relation(fields: [eventId], references: [id])
}

model Review {
  id          String    @id @default(uuid())
  userId      String
  instituteId String
  star        Int
  review      String?
  user        User      @relation(fields: [userId], references: [id])
  institute   Institute @relation(fields: [instituteId], references: [id])
}

model Photo {
  id          String    @id @default(uuid())
  instituteId String
  url         String
  institute   Institute @relation(fields: [instituteId], references: [id])
}

model Feature {
  id            String         @id @default(uuid())
  name          String
  eventFeatures EventFeature[]
}

model EventFeature {
  id          String    @id @default(uuid())
  eventId     String
  featureId   String
  instituteId String
  event       Event     @relation(fields: [eventId], references: [id])
  feature     Feature   @relation(fields: [featureId], references: [id])
  institute   Institute @relation(fields: [instituteId], references: [id])
}
